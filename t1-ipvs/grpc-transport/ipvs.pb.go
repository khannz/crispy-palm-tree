// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: ipvs.proto

package transport

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EmptyGetIPVSData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EmptyGetIPVSData) Reset() {
	*x = EmptyGetIPVSData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyGetIPVSData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyGetIPVSData) ProtoMessage() {}

func (x *EmptyGetIPVSData) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyGetIPVSData.ProtoReflect.Descriptor instead.
func (*EmptyGetIPVSData) Descriptor() ([]byte, []int) {
	return file_ipvs_proto_rawDescGZIP(), []int{0}
}

func (x *EmptyGetIPVSData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PbGetIPVSRawServicesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawServicesData map[string]*PbGetRawIPVSServiceData `protobuf:"bytes,1,rep,name=rawServicesData,proto3" json:"rawServicesData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Id              string                              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PbGetIPVSRawServicesData) Reset() {
	*x = PbGetIPVSRawServicesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbGetIPVSRawServicesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbGetIPVSRawServicesData) ProtoMessage() {}

func (x *PbGetIPVSRawServicesData) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbGetIPVSRawServicesData.ProtoReflect.Descriptor instead.
func (*PbGetIPVSRawServicesData) Descriptor() ([]byte, []int) {
	return file_ipvs_proto_rawDescGZIP(), []int{1}
}

func (x *PbGetIPVSRawServicesData) GetRawServicesData() map[string]*PbGetRawIPVSServiceData {
	if x != nil {
		return x.RawServicesData
	}
	return nil
}

func (x *PbGetIPVSRawServicesData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PbGetRawIPVSServiceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawServiceData map[string]uint32 `protobuf:"bytes,1,rep,name=rawServiceData,proto3" json:"rawServiceData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Id             string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PbGetRawIPVSServiceData) Reset() {
	*x = PbGetRawIPVSServiceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbGetRawIPVSServiceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbGetRawIPVSServiceData) ProtoMessage() {}

func (x *PbGetRawIPVSServiceData) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbGetRawIPVSServiceData.ProtoReflect.Descriptor instead.
func (*PbGetRawIPVSServiceData) Descriptor() ([]byte, []int) {
	return file_ipvs_proto_rawDescGZIP(), []int{2}
}

func (x *PbGetRawIPVSServiceData) GetRawServiceData() map[string]uint32 {
	if x != nil {
		return x.RawServiceData
	}
	return nil
}

func (x *PbGetRawIPVSServiceData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PbGetIPVSServicesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services map[string]*PbGetIPVSServiceData `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // string - vip+port
	Id       string                           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PbGetIPVSServicesData) Reset() {
	*x = PbGetIPVSServicesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbGetIPVSServicesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbGetIPVSServicesData) ProtoMessage() {}

func (x *PbGetIPVSServicesData) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbGetIPVSServicesData.ProtoReflect.Descriptor instead.
func (*PbGetIPVSServicesData) Descriptor() ([]byte, []int) {
	return file_ipvs_proto_rawDescGZIP(), []int{3}
}

func (x *PbGetIPVSServicesData) GetServices() map[string]*PbGetIPVSServiceData {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *PbGetIPVSServicesData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PbGetIPVSServiceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vip                string            `protobuf:"bytes,1,opt,name=vip,proto3" json:"vip,omitempty"`
	Port               uint32            `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"` // uint16
	RoutingType        uint32            `protobuf:"varint,3,opt,name=routingType,proto3" json:"routingType,omitempty"`
	BalanceType        string            `protobuf:"bytes,4,opt,name=balanceType,proto3" json:"balanceType,omitempty"`
	Protocol           uint32            `protobuf:"varint,5,opt,name=protocol,proto3" json:"protocol,omitempty"` // uint16
	ApplicationServers map[string]uint32 `protobuf:"bytes,6,rep,name=applicationServers,proto3" json:"applicationServers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Id                 string            `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PbGetIPVSServiceData) Reset() {
	*x = PbGetIPVSServiceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ipvs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbGetIPVSServiceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbGetIPVSServiceData) ProtoMessage() {}

func (x *PbGetIPVSServiceData) ProtoReflect() protoreflect.Message {
	mi := &file_ipvs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbGetIPVSServiceData.ProtoReflect.Descriptor instead.
func (*PbGetIPVSServiceData) Descriptor() ([]byte, []int) {
	return file_ipvs_proto_rawDescGZIP(), []int{4}
}

func (x *PbGetIPVSServiceData) GetVip() string {
	if x != nil {
		return x.Vip
	}
	return ""
}

func (x *PbGetIPVSServiceData) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PbGetIPVSServiceData) GetRoutingType() uint32 {
	if x != nil {
		return x.RoutingType
	}
	return 0
}

func (x *PbGetIPVSServiceData) GetBalanceType() string {
	if x != nil {
		return x.BalanceType
	}
	return ""
}

func (x *PbGetIPVSServiceData) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *PbGetIPVSServiceData) GetApplicationServers() map[string]uint32 {
	if x != nil {
		return x.ApplicationServers
	}
	return nil
}

func (x *PbGetIPVSServiceData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_ipvs_proto protoreflect.FileDescriptor

var file_ipvs_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x69, 0x70, 0x76, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x22, 0x0a, 0x10, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x47, 0x65, 0x74, 0x49, 0x50, 0x56, 0x53, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf6, 0x01, 0x0a, 0x18,
	0x50, 0x62, 0x47, 0x65, 0x74, 0x49, 0x50, 0x56, 0x53, 0x52, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x0f, 0x72, 0x61, 0x77, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x62,
	0x47, 0x65, 0x74, 0x49, 0x50, 0x56, 0x53, 0x52, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x72, 0x61, 0x77,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x66, 0x0a, 0x14,
	0x52, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x50, 0x62, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x49, 0x50, 0x56, 0x53, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xcc, 0x01, 0x0a, 0x17, 0x50, 0x62, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x77, 0x49, 0x50, 0x56, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x5e, 0x0a, 0x0e, 0x72, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x62, 0x47, 0x65, 0x74, 0x52, 0x61, 0x77, 0x49, 0x50, 0x56,
	0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x61, 0x77,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x72, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x1a, 0x41, 0x0a, 0x13, 0x52, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xd1, 0x01, 0x0a, 0x15, 0x50, 0x62, 0x47, 0x65, 0x74, 0x49, 0x50, 0x56,
	0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x62, 0x47, 0x65,
	0x74, 0x49, 0x50, 0x56, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x5c, 0x0a, 0x0d, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x62, 0x47, 0x65, 0x74, 0x49, 0x50, 0x56,
	0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdc, 0x02, 0x0a, 0x14, 0x50, 0x62, 0x47, 0x65,
	0x74, 0x49, 0x50, 0x56, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x10, 0x0a, 0x03, 0x76, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x67, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50,
	0x62, 0x47, 0x65, 0x74, 0x49, 0x50, 0x56, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a,
	0x45, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xdd, 0x03, 0x0a, 0x0c, 0x49, 0x50, 0x56, 0x53, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x49, 0x50,
	0x56, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x62, 0x47, 0x65, 0x74, 0x49, 0x50, 0x56, 0x53, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x47, 0x65, 0x74, 0x49,
	0x50, 0x56, 0x53, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x23, 0x41, 0x64, 0x64,
	0x49, 0x50, 0x56, 0x53, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x62, 0x47,
	0x65, 0x74, 0x49, 0x50, 0x56, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x47, 0x65, 0x74, 0x49, 0x50, 0x56, 0x53, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00,
	0x12, 0x53, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49, 0x50, 0x56, 0x53, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x50, 0x62, 0x47, 0x65, 0x74, 0x49, 0x50, 0x56, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x47, 0x65, 0x74, 0x49, 0x50, 0x56, 0x53, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x27, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x49,
	0x50, 0x56, 0x53, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1f, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x62, 0x47,
	0x65, 0x74, 0x49, 0x50, 0x56, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x47, 0x65, 0x74, 0x49, 0x50, 0x56, 0x53, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00,
	0x12, 0x54, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x50, 0x56, 0x53, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x47, 0x65, 0x74, 0x49, 0x50, 0x56, 0x53, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x23, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x62, 0x47, 0x65,
	0x74, 0x49, 0x50, 0x56, 0x53, 0x52, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ipvs_proto_rawDescOnce sync.Once
	file_ipvs_proto_rawDescData = file_ipvs_proto_rawDesc
)

func file_ipvs_proto_rawDescGZIP() []byte {
	file_ipvs_proto_rawDescOnce.Do(func() {
		file_ipvs_proto_rawDescData = protoimpl.X.CompressGZIP(file_ipvs_proto_rawDescData)
	})
	return file_ipvs_proto_rawDescData
}

var file_ipvs_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_ipvs_proto_goTypes = []interface{}{
	(*EmptyGetIPVSData)(nil),         // 0: transport.EmptyGetIPVSData
	(*PbGetIPVSRawServicesData)(nil), // 1: transport.PbGetIPVSRawServicesData
	(*PbGetRawIPVSServiceData)(nil),  // 2: transport.PbGetRawIPVSServiceData
	(*PbGetIPVSServicesData)(nil),    // 3: transport.PbGetIPVSServicesData
	(*PbGetIPVSServiceData)(nil),     // 4: transport.PbGetIPVSServiceData
	nil,                              // 5: transport.PbGetIPVSRawServicesData.RawServicesDataEntry
	nil,                              // 6: transport.PbGetRawIPVSServiceData.RawServiceDataEntry
	nil,                              // 7: transport.PbGetIPVSServicesData.ServicesEntry
	nil,                              // 8: transport.PbGetIPVSServiceData.ApplicationServersEntry
}
var file_ipvs_proto_depIdxs = []int32{
	5,  // 0: transport.PbGetIPVSRawServicesData.rawServicesData:type_name -> transport.PbGetIPVSRawServicesData.RawServicesDataEntry
	6,  // 1: transport.PbGetRawIPVSServiceData.rawServiceData:type_name -> transport.PbGetRawIPVSServiceData.RawServiceDataEntry
	7,  // 2: transport.PbGetIPVSServicesData.services:type_name -> transport.PbGetIPVSServicesData.ServicesEntry
	8,  // 3: transport.PbGetIPVSServiceData.applicationServers:type_name -> transport.PbGetIPVSServiceData.ApplicationServersEntry
	2,  // 4: transport.PbGetIPVSRawServicesData.RawServicesDataEntry.value:type_name -> transport.PbGetRawIPVSServiceData
	4,  // 5: transport.PbGetIPVSServicesData.ServicesEntry.value:type_name -> transport.PbGetIPVSServiceData
	4,  // 6: transport.IPVSGetWoker.NewIPVSService:input_type -> transport.PbGetIPVSServiceData
	4,  // 7: transport.IPVSGetWoker.AddIPVSApplicationServersForService:input_type -> transport.PbGetIPVSServiceData
	4,  // 8: transport.IPVSGetWoker.RemoveIPVSService:input_type -> transport.PbGetIPVSServiceData
	4,  // 9: transport.IPVSGetWoker.RemoveIPVSApplicationServersFromService:input_type -> transport.PbGetIPVSServiceData
	0,  // 10: transport.IPVSGetWoker.GetIPVSRuntime:input_type -> transport.EmptyGetIPVSData
	0,  // 11: transport.IPVSGetWoker.NewIPVSService:output_type -> transport.EmptyGetIPVSData
	0,  // 12: transport.IPVSGetWoker.AddIPVSApplicationServersForService:output_type -> transport.EmptyGetIPVSData
	0,  // 13: transport.IPVSGetWoker.RemoveIPVSService:output_type -> transport.EmptyGetIPVSData
	0,  // 14: transport.IPVSGetWoker.RemoveIPVSApplicationServersFromService:output_type -> transport.EmptyGetIPVSData
	1,  // 15: transport.IPVSGetWoker.GetIPVSRuntime:output_type -> transport.PbGetIPVSRawServicesData
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_ipvs_proto_init() }
func file_ipvs_proto_init() {
	if File_ipvs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ipvs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyGetIPVSData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbGetIPVSRawServicesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbGetRawIPVSServiceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbGetIPVSServicesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ipvs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbGetIPVSServiceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ipvs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ipvs_proto_goTypes,
		DependencyIndexes: file_ipvs_proto_depIdxs,
		MessageInfos:      file_ipvs_proto_msgTypes,
	}.Build()
	File_ipvs_proto = out.File
	file_ipvs_proto_rawDesc = nil
	file_ipvs_proto_goTypes = nil
	file_ipvs_proto_depIdxs = nil
}
