// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lbos_t1_orch

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SendIPVSRuntimeClient is the client API for SendIPVSRuntime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendIPVSRuntimeClient interface {
	SendIPVSRuntime(ctx context.Context, in *PbSendIPVSRawServicesData, opts ...grpc.CallOption) (*EmptySendIPVSData, error)
}

type sendIPVSRuntimeClient struct {
	cc grpc.ClientConnInterface
}

func NewSendIPVSRuntimeClient(cc grpc.ClientConnInterface) SendIPVSRuntimeClient {
	return &sendIPVSRuntimeClient{cc}
}

func (c *sendIPVSRuntimeClient) SendIPVSRuntime(ctx context.Context, in *PbSendIPVSRawServicesData, opts ...grpc.CallOption) (*EmptySendIPVSData, error) {
	out := new(EmptySendIPVSData)
	err := c.cc.Invoke(ctx, "/lbos.t1.orch.SendIPVSRuntime/SendIPVSRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendIPVSRuntimeServer is the server API for SendIPVSRuntime service.
// All implementations must embed UnimplementedSendIPVSRuntimeServer
// for forward compatibility
type SendIPVSRuntimeServer interface {
	SendIPVSRuntime(context.Context, *PbSendIPVSRawServicesData) (*EmptySendIPVSData, error)
	mustEmbedUnimplementedSendIPVSRuntimeServer()
}

// UnimplementedSendIPVSRuntimeServer must be embedded to have forward compatible implementations.
type UnimplementedSendIPVSRuntimeServer struct {
}

func (UnimplementedSendIPVSRuntimeServer) SendIPVSRuntime(context.Context, *PbSendIPVSRawServicesData) (*EmptySendIPVSData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendIPVSRuntime not implemented")
}
func (UnimplementedSendIPVSRuntimeServer) mustEmbedUnimplementedSendIPVSRuntimeServer() {}

// UnsafeSendIPVSRuntimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendIPVSRuntimeServer will
// result in compilation errors.
type UnsafeSendIPVSRuntimeServer interface {
	mustEmbedUnimplementedSendIPVSRuntimeServer()
}

func RegisterSendIPVSRuntimeServer(s *grpc.Server, srv SendIPVSRuntimeServer) {
	s.RegisterService(&_SendIPVSRuntime_serviceDesc, srv)
}

func _SendIPVSRuntime_SendIPVSRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PbSendIPVSRawServicesData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendIPVSRuntimeServer).SendIPVSRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbos.t1.orch.SendIPVSRuntime/SendIPVSRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendIPVSRuntimeServer).SendIPVSRuntime(ctx, req.(*PbSendIPVSRawServicesData))
	}
	return interceptor(ctx, in, info, handler)
}

var _SendIPVSRuntime_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lbos.t1.orch.SendIPVSRuntime",
	HandlerType: (*SendIPVSRuntimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendIPVSRuntime",
			Handler:    _SendIPVSRuntime_SendIPVSRuntime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "t1-orch.proto",
}
