// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lbos_t1_tunnel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TunnelGetWorkerClient is the client API for TunnelGetWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelGetWorkerClient interface {
	AddTunnel(ctx context.Context, in *TunnelData, opts ...grpc.CallOption) (*EmptyTunnelData, error)
	RemoveTunnel(ctx context.Context, in *TunnelData, opts ...grpc.CallOption) (*EmptyTunnelData, error)
	GetTunnelRuntime(ctx context.Context, in *EmptyTunnelData, opts ...grpc.CallOption) (*GetTunnelRuntimeData, error)
}

type tunnelGetWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelGetWorkerClient(cc grpc.ClientConnInterface) TunnelGetWorkerClient {
	return &tunnelGetWorkerClient{cc}
}

func (c *tunnelGetWorkerClient) AddTunnel(ctx context.Context, in *TunnelData, opts ...grpc.CallOption) (*EmptyTunnelData, error) {
	out := new(EmptyTunnelData)
	err := c.cc.Invoke(ctx, "/lbos.t1.tunnel.TunnelGetWorker/AddTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelGetWorkerClient) RemoveTunnel(ctx context.Context, in *TunnelData, opts ...grpc.CallOption) (*EmptyTunnelData, error) {
	out := new(EmptyTunnelData)
	err := c.cc.Invoke(ctx, "/lbos.t1.tunnel.TunnelGetWorker/RemoveTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tunnelGetWorkerClient) GetTunnelRuntime(ctx context.Context, in *EmptyTunnelData, opts ...grpc.CallOption) (*GetTunnelRuntimeData, error) {
	out := new(GetTunnelRuntimeData)
	err := c.cc.Invoke(ctx, "/lbos.t1.tunnel.TunnelGetWorker/GetTunnelRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunnelGetWorkerServer is the server API for TunnelGetWorker service.
// All implementations must embed UnimplementedTunnelGetWorkerServer
// for forward compatibility
type TunnelGetWorkerServer interface {
	AddTunnel(context.Context, *TunnelData) (*EmptyTunnelData, error)
	RemoveTunnel(context.Context, *TunnelData) (*EmptyTunnelData, error)
	GetTunnelRuntime(context.Context, *EmptyTunnelData) (*GetTunnelRuntimeData, error)
	mustEmbedUnimplementedTunnelGetWorkerServer()
}

// UnimplementedTunnelGetWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedTunnelGetWorkerServer struct {
}

func (UnimplementedTunnelGetWorkerServer) AddTunnel(context.Context, *TunnelData) (*EmptyTunnelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTunnel not implemented")
}
func (UnimplementedTunnelGetWorkerServer) RemoveTunnel(context.Context, *TunnelData) (*EmptyTunnelData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTunnel not implemented")
}
func (UnimplementedTunnelGetWorkerServer) GetTunnelRuntime(context.Context, *EmptyTunnelData) (*GetTunnelRuntimeData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnelRuntime not implemented")
}
func (UnimplementedTunnelGetWorkerServer) mustEmbedUnimplementedTunnelGetWorkerServer() {}

// UnsafeTunnelGetWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelGetWorkerServer will
// result in compilation errors.
type UnsafeTunnelGetWorkerServer interface {
	mustEmbedUnimplementedTunnelGetWorkerServer()
}

func RegisterTunnelGetWorkerServer(s grpc.ServiceRegistrar, srv TunnelGetWorkerServer) {
	s.RegisterService(&TunnelGetWorker_ServiceDesc, srv)
}

func _TunnelGetWorker_AddTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TunnelData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelGetWorkerServer).AddTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbos.t1.tunnel.TunnelGetWorker/AddTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelGetWorkerServer).AddTunnel(ctx, req.(*TunnelData))
	}
	return interceptor(ctx, in, info, handler)
}

func _TunnelGetWorker_RemoveTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TunnelData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelGetWorkerServer).RemoveTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbos.t1.tunnel.TunnelGetWorker/RemoveTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelGetWorkerServer).RemoveTunnel(ctx, req.(*TunnelData))
	}
	return interceptor(ctx, in, info, handler)
}

func _TunnelGetWorker_GetTunnelRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyTunnelData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelGetWorkerServer).GetTunnelRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbos.t1.tunnel.TunnelGetWorker/GetTunnelRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelGetWorkerServer).GetTunnelRuntime(ctx, req.(*EmptyTunnelData))
	}
	return interceptor(ctx, in, info, handler)
}

// TunnelGetWorker_ServiceDesc is the grpc.ServiceDesc for TunnelGetWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TunnelGetWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lbos.t1.tunnel.TunnelGetWorker",
	HandlerType: (*TunnelGetWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTunnel",
			Handler:    _TunnelGetWorker_AddTunnel_Handler,
		},
		{
			MethodName: "RemoveTunnel",
			Handler:    _TunnelGetWorker_RemoveTunnel_Handler,
		},
		{
			MethodName: "GetTunnelRuntime",
			Handler:    _TunnelGetWorker_GetTunnelRuntime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "t1-tunnel.proto",
}
