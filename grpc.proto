syntax = "proto3";
package transport;

import "google/protobuf/duration.proto";

option go_package = "github.com/crispy-palm-tree/lbost1a-controller/portadapter";

// TODO: protofiles for microservoces (at now we have only one file)

service HCGet {
  rpc HCGetPbService (PbService) returns (PbService) {}
  rpc HCGetPbServiceS (EmptyPbService) returns (PbServices) {}
}

service HCNew{
  rpc HCNewPbService (PbService) returns (EmptyPbService) {}
}

service HCUpdate{
  rpc HCUpdatePbService (PbService) returns (PbService) {}
  rpc HCRemovePbService (PbService) returns (EmptyPbService) {}
}

// TODO: 
// message GetPbService {
//   string address = 1;
// }

message EmptyPbService {
}

message PbService {
  string address = 1;
  string ip = 2;
  string port = 3;
  bool isUp = 4;
  string balanceType = 5;
  string routingType = 6;
  string protocol = 7;
  int32 alivedAppServersForUp = 8;
  string hcType = 9;
  google.protobuf.Duration hcRepeat = 10;
  google.protobuf.Duration hcTimeout = 11;
  map<string, string> hcUserDefinedData = 13;
  bool hcNearFieldsMode = 12;
  int32 hcRetriesForUP = 14;
  int32 hcRetriesForDown = 15;

  message PbApplicationServer {
    string address = 1;
    string ip = 2;
    string port = 3;
    bool isUp = 4;
    string hcAddress = 5;
  }

  repeated PbApplicationServer pbApplicationServers = 16;
}

message PbServices {
    map<string, PbService> services = 1;
}

message PbIPVSServices {
  string vip = 1;
  uint32 port = 2; // uint16
  uint32 routingType = 3;
  string balanceType = 4;
  uint32 protocol = 5; // uint16
  map<string, uint32> applicationServers = 6;
  string id = 7;
}

service IPVSWoker {
  rpc NewIPVSService (PbIPVSServices) returns (EmptyPbService) {}
  rpc AddIPVSApplicationServersForService (PbIPVSServices) returns (EmptyPbService) {}
  rpc RemoveIPVSService (PbIPVSServices) returns (EmptyPbService) {}
  rpc RemoveIPVSApplicationServersFromService (PbIPVSServices) returns (EmptyPbService) {}
  rpc IsIPVSApplicationServerInService (PbIPVSServices) returns (BoolData) {}
  rpc IPVSFlush (EmptyPbService) returns (EmptyPbService) {}
}

message BoolData {
  bool isIn = 1;
}

service DummyWoker {
  rpc AddToDummy (IpData) returns (EmptyPbService) {}
  rpc RemoveFromDummy (IpData) returns (EmptyPbService) {}
}

message IpData {
  string ip = 1;
}
