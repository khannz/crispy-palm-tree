// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lbos_t1_ipruler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// IPRulerGetWorkerClient is the client API for IPRulerGetWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IPRulerGetWorkerClient interface {
	AddToIPRuler(ctx context.Context, in *IpData, opts ...grpc.CallOption) (*EmptyGetIPRulerData, error)
	RemoveFromIPRuler(ctx context.Context, in *IpData, opts ...grpc.CallOption) (*EmptyGetIPRulerData, error)
	GetIPRulerRuntime(ctx context.Context, in *EmptyGetIPRulerData, opts ...grpc.CallOption) (*GetIPRulerRuntimeData, error)
}

type iPRulerGetWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewIPRulerGetWorkerClient(cc grpc.ClientConnInterface) IPRulerGetWorkerClient {
	return &iPRulerGetWorkerClient{cc}
}

func (c *iPRulerGetWorkerClient) AddToIPRuler(ctx context.Context, in *IpData, opts ...grpc.CallOption) (*EmptyGetIPRulerData, error) {
	out := new(EmptyGetIPRulerData)
	err := c.cc.Invoke(ctx, "/lbos.t1.ipruler.IPRulerGetWorker/AddToIPRuler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPRulerGetWorkerClient) RemoveFromIPRuler(ctx context.Context, in *IpData, opts ...grpc.CallOption) (*EmptyGetIPRulerData, error) {
	out := new(EmptyGetIPRulerData)
	err := c.cc.Invoke(ctx, "/lbos.t1.ipruler.IPRulerGetWorker/RemoveFromIPRuler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPRulerGetWorkerClient) GetIPRulerRuntime(ctx context.Context, in *EmptyGetIPRulerData, opts ...grpc.CallOption) (*GetIPRulerRuntimeData, error) {
	out := new(GetIPRulerRuntimeData)
	err := c.cc.Invoke(ctx, "/lbos.t1.ipruler.IPRulerGetWorker/GetIPRulerRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPRulerGetWorkerServer is the server API for IPRulerGetWorker service.
// All implementations must embed UnimplementedIPRulerGetWorkerServer
// for forward compatibility
type IPRulerGetWorkerServer interface {
	AddToIPRuler(context.Context, *IpData) (*EmptyGetIPRulerData, error)
	RemoveFromIPRuler(context.Context, *IpData) (*EmptyGetIPRulerData, error)
	GetIPRulerRuntime(context.Context, *EmptyGetIPRulerData) (*GetIPRulerRuntimeData, error)
	mustEmbedUnimplementedIPRulerGetWorkerServer()
}

// UnimplementedIPRulerGetWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedIPRulerGetWorkerServer struct {
}

func (UnimplementedIPRulerGetWorkerServer) AddToIPRuler(context.Context, *IpData) (*EmptyGetIPRulerData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToIPRuler not implemented")
}
func (UnimplementedIPRulerGetWorkerServer) RemoveFromIPRuler(context.Context, *IpData) (*EmptyGetIPRulerData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromIPRuler not implemented")
}
func (UnimplementedIPRulerGetWorkerServer) GetIPRulerRuntime(context.Context, *EmptyGetIPRulerData) (*GetIPRulerRuntimeData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIPRulerRuntime not implemented")
}
func (UnimplementedIPRulerGetWorkerServer) mustEmbedUnimplementedIPRulerGetWorkerServer() {}

// UnsafeIPRulerGetWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPRulerGetWorkerServer will
// result in compilation errors.
type UnsafeIPRulerGetWorkerServer interface {
	mustEmbedUnimplementedIPRulerGetWorkerServer()
}

func RegisterIPRulerGetWorkerServer(s grpc.ServiceRegistrar, srv IPRulerGetWorkerServer) {
	s.RegisterService(&IPRulerGetWorker_ServiceDesc, srv)
}

func _IPRulerGetWorker_AddToIPRuler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPRulerGetWorkerServer).AddToIPRuler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbos.t1.ipruler.IPRulerGetWorker/AddToIPRuler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPRulerGetWorkerServer).AddToIPRuler(ctx, req.(*IpData))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPRulerGetWorker_RemoveFromIPRuler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPRulerGetWorkerServer).RemoveFromIPRuler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbos.t1.ipruler.IPRulerGetWorker/RemoveFromIPRuler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPRulerGetWorkerServer).RemoveFromIPRuler(ctx, req.(*IpData))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPRulerGetWorker_GetIPRulerRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyGetIPRulerData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPRulerGetWorkerServer).GetIPRulerRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbos.t1.ipruler.IPRulerGetWorker/GetIPRulerRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPRulerGetWorkerServer).GetIPRulerRuntime(ctx, req.(*EmptyGetIPRulerData))
	}
	return interceptor(ctx, in, info, handler)
}

// IPRulerGetWorker_ServiceDesc is the grpc.ServiceDesc for IPRulerGetWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPRulerGetWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lbos.t1.ipruler.IPRulerGetWorker",
	HandlerType: (*IPRulerGetWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToIPRuler",
			Handler:    _IPRulerGetWorker_AddToIPRuler_Handler,
		},
		{
			MethodName: "RemoveFromIPRuler",
			Handler:    _IPRulerGetWorker_RemoveFromIPRuler_Handler,
		},
		{
			MethodName: "GetIPRulerRuntime",
			Handler:    _IPRulerGetWorker_GetIPRulerRuntime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "t1-ipruler.proto",
}
