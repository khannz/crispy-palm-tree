// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.4
// source: healthcheck.proto

package lbos_t1_dummy

import (
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TcpData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HealthcheckAddress string             `protobuf:"bytes,1,opt,name=healthcheckAddress,proto3" json:"healthcheckAddress,omitempty"`
	Timeout            *duration.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Fwmark             int64              `protobuf:"varint,3,opt,name=fwmark,proto3" json:"fwmark,omitempty"`
	Id                 string             `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TcpData) Reset() {
	*x = TcpData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TcpData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TcpData) ProtoMessage() {}

func (x *TcpData) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TcpData.ProtoReflect.Descriptor instead.
func (*TcpData) Descriptor() ([]byte, []int) {
	return file_healthcheck_proto_rawDescGZIP(), []int{0}
}

func (x *TcpData) GetHealthcheckAddress() string {
	if x != nil {
		return x.HealthcheckAddress
	}
	return ""
}

func (x *TcpData) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *TcpData) GetFwmark() int64 {
	if x != nil {
		return x.Fwmark
	}
	return 0
}

func (x *TcpData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type IcmpData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpS     string             `protobuf:"bytes,1,opt,name=ipS,proto3" json:"ipS,omitempty"`
	Timeout *duration.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Fwmark  int64              `protobuf:"varint,3,opt,name=fwmark,proto3" json:"fwmark,omitempty"`
	Id      string             `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IcmpData) Reset() {
	*x = IcmpData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IcmpData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IcmpData) ProtoMessage() {}

func (x *IcmpData) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IcmpData.ProtoReflect.Descriptor instead.
func (*IcmpData) Descriptor() ([]byte, []int) {
	return file_healthcheck_proto_rawDescGZIP(), []int{1}
}

func (x *IcmpData) GetIpS() string {
	if x != nil {
		return x.IpS
	}
	return ""
}

func (x *IcmpData) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *IcmpData) GetFwmark() int64 {
	if x != nil {
		return x.Fwmark
	}
	return 0
}

func (x *IcmpData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type HttpsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HealthcheckAddress string             `protobuf:"bytes,1,opt,name=healthcheckAddress,proto3" json:"healthcheckAddress,omitempty"`
	Timeout            *duration.Duration `protobuf:"bytes,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Fwmark             int64              `protobuf:"varint,3,opt,name=fwmark,proto3" json:"fwmark,omitempty"`
	Id                 string             `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *HttpsData) Reset() {
	*x = HttpsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpsData) ProtoMessage() {}

func (x *HttpsData) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpsData.ProtoReflect.Descriptor instead.
func (*HttpsData) Descriptor() ([]byte, []int) {
	return file_healthcheck_proto_rawDescGZIP(), []int{2}
}

func (x *HttpsData) GetHealthcheckAddress() string {
	if x != nil {
		return x.HealthcheckAddress
	}
	return ""
}

func (x *HttpsData) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *HttpsData) GetFwmark() int64 {
	if x != nil {
		return x.Fwmark
	}
	return 0
}

func (x *HttpsData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type HttpAdvancedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HealthcheckType    string             `protobuf:"bytes,1,opt,name=healthcheckType,proto3" json:"healthcheckType,omitempty"`
	HealthcheckAddress string             `protobuf:"bytes,2,opt,name=healthcheckAddress,proto3" json:"healthcheckAddress,omitempty"`
	NearFieldsMode     bool               `protobuf:"varint,3,opt,name=nearFieldsMode,proto3" json:"nearFieldsMode,omitempty"`
	UserDefinedData    map[string]string  `protobuf:"bytes,4,rep,name=userDefinedData,proto3" json:"userDefinedData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timeout            *duration.Duration `protobuf:"bytes,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Fwmark             int64              `protobuf:"varint,6,opt,name=fwmark,proto3" json:"fwmark,omitempty"`
	Id                 string             `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *HttpAdvancedData) Reset() {
	*x = HttpAdvancedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpAdvancedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpAdvancedData) ProtoMessage() {}

func (x *HttpAdvancedData) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpAdvancedData.ProtoReflect.Descriptor instead.
func (*HttpAdvancedData) Descriptor() ([]byte, []int) {
	return file_healthcheck_proto_rawDescGZIP(), []int{3}
}

func (x *HttpAdvancedData) GetHealthcheckType() string {
	if x != nil {
		return x.HealthcheckType
	}
	return ""
}

func (x *HttpAdvancedData) GetHealthcheckAddress() string {
	if x != nil {
		return x.HealthcheckAddress
	}
	return ""
}

func (x *HttpAdvancedData) GetNearFieldsMode() bool {
	if x != nil {
		return x.NearFieldsMode
	}
	return false
}

func (x *HttpAdvancedData) GetUserDefinedData() map[string]string {
	if x != nil {
		return x.UserDefinedData
	}
	return nil
}

func (x *HttpAdvancedData) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *HttpAdvancedData) GetFwmark() int64 {
	if x != nil {
		return x.Fwmark
	}
	return 0
}

func (x *HttpAdvancedData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type IsOk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsOk bool   `protobuf:"varint,1,opt,name=isOk,proto3" json:"isOk,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IsOk) Reset() {
	*x = IsOk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_healthcheck_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsOk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsOk) ProtoMessage() {}

func (x *IsOk) ProtoReflect() protoreflect.Message {
	mi := &file_healthcheck_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsOk.ProtoReflect.Descriptor instead.
func (*IsOk) Descriptor() ([]byte, []int) {
	return file_healthcheck_proto_rawDescGZIP(), []int{4}
}

func (x *IsOk) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

func (x *IsOk) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_healthcheck_proto protoreflect.FileDescriptor

var file_healthcheck_proto_rawDesc = []byte{
	0x0a, 0x11, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e, 0x64, 0x75, 0x6d,
	0x6d, 0x79, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x96, 0x01, 0x0a, 0x07, 0x54, 0x63, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e,
	0x0a, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x77, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x77, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x79, 0x0a, 0x08, 0x49,
	0x63, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x53, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x53, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x77, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x66, 0x77, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x09, 0x48, 0x74, 0x74, 0x70, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x77, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x77, 0x6d, 0x61, 0x72,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x95, 0x03, 0x0a, 0x10, 0x48, 0x74, 0x74, 0x70, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x68, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x65, 0x61, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x65, 0x61, 0x72, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e, 0x64, 0x75, 0x6d, 0x6d,
	0x79, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x77, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66,
	0x77, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x42, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a, 0x04, 0x49, 0x73, 0x4f,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x4f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x69, 0x73, 0x4f, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x32, 0xa7, 0x02, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x15, 0x49,
	0x73, 0x48, 0x74, 0x74, 0x70, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x4f, 0x6b, 0x12, 0x1f, 0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e, 0x64,
	0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x13, 0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e,
	0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x49, 0x73, 0x4f, 0x6b, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0e,
	0x49, 0x73, 0x48, 0x74, 0x74, 0x70, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x6b, 0x12, 0x18,
	0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x73, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x13, 0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e,
	0x74, 0x31, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x49, 0x73, 0x4f, 0x6b, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x0d, 0x49, 0x73, 0x49, 0x63, 0x6d, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x6b,
	0x12, 0x17, 0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79,
	0x2e, 0x49, 0x63, 0x6d, 0x70, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x13, 0x2e, 0x6c, 0x62, 0x6f, 0x73,
	0x2e, 0x74, 0x31, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x49, 0x73, 0x4f, 0x6b, 0x22, 0x00,
	0x12, 0x3d, 0x0a, 0x0c, 0x49, 0x73, 0x54, 0x63, 0x70, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x6b,
	0x12, 0x16, 0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79,
	0x2e, 0x54, 0x63, 0x70, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x13, 0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e,
	0x74, 0x31, 0x2e, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x2e, 0x49, 0x73, 0x4f, 0x6b, 0x22, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_healthcheck_proto_rawDescOnce sync.Once
	file_healthcheck_proto_rawDescData = file_healthcheck_proto_rawDesc
)

func file_healthcheck_proto_rawDescGZIP() []byte {
	file_healthcheck_proto_rawDescOnce.Do(func() {
		file_healthcheck_proto_rawDescData = protoimpl.X.CompressGZIP(file_healthcheck_proto_rawDescData)
	})
	return file_healthcheck_proto_rawDescData
}

var file_healthcheck_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_healthcheck_proto_goTypes = []interface{}{
	(*TcpData)(nil),           // 0: lbos.t1.dummy.TcpData
	(*IcmpData)(nil),          // 1: lbos.t1.dummy.IcmpData
	(*HttpsData)(nil),         // 2: lbos.t1.dummy.HttpsData
	(*HttpAdvancedData)(nil),  // 3: lbos.t1.dummy.HttpAdvancedData
	(*IsOk)(nil),              // 4: lbos.t1.dummy.IsOk
	nil,                       // 5: lbos.t1.dummy.HttpAdvancedData.UserDefinedDataEntry
	(*duration.Duration)(nil), // 6: google.protobuf.Duration
}
var file_healthcheck_proto_depIdxs = []int32{
	6, // 0: lbos.t1.dummy.TcpData.timeout:type_name -> google.protobuf.Duration
	6, // 1: lbos.t1.dummy.IcmpData.timeout:type_name -> google.protobuf.Duration
	6, // 2: lbos.t1.dummy.HttpsData.timeout:type_name -> google.protobuf.Duration
	5, // 3: lbos.t1.dummy.HttpAdvancedData.userDefinedData:type_name -> lbos.t1.dummy.HttpAdvancedData.UserDefinedDataEntry
	6, // 4: lbos.t1.dummy.HttpAdvancedData.timeout:type_name -> google.protobuf.Duration
	3, // 5: lbos.t1.dummy.HealthcheckWorker.IsHttpAdvancedCheckOk:input_type -> lbos.t1.dummy.HttpAdvancedData
	2, // 6: lbos.t1.dummy.HealthcheckWorker.IsHttpsCheckOk:input_type -> lbos.t1.dummy.HttpsData
	1, // 7: lbos.t1.dummy.HealthcheckWorker.IsIcmpCheckOk:input_type -> lbos.t1.dummy.IcmpData
	0, // 8: lbos.t1.dummy.HealthcheckWorker.IsTcpCheckOk:input_type -> lbos.t1.dummy.TcpData
	4, // 9: lbos.t1.dummy.HealthcheckWorker.IsHttpAdvancedCheckOk:output_type -> lbos.t1.dummy.IsOk
	4, // 10: lbos.t1.dummy.HealthcheckWorker.IsHttpsCheckOk:output_type -> lbos.t1.dummy.IsOk
	4, // 11: lbos.t1.dummy.HealthcheckWorker.IsIcmpCheckOk:output_type -> lbos.t1.dummy.IsOk
	4, // 12: lbos.t1.dummy.HealthcheckWorker.IsTcpCheckOk:output_type -> lbos.t1.dummy.IsOk
	9, // [9:13] is the sub-list for method output_type
	5, // [5:9] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_healthcheck_proto_init() }
func file_healthcheck_proto_init() {
	if File_healthcheck_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_healthcheck_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TcpData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IcmpData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpAdvancedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_healthcheck_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsOk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_healthcheck_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_healthcheck_proto_goTypes,
		DependencyIndexes: file_healthcheck_proto_depIdxs,
		MessageInfos:      file_healthcheck_proto_msgTypes,
	}.Build()
	File_healthcheck_proto = out.File
	file_healthcheck_proto_rawDesc = nil
	file_healthcheck_proto_goTypes = nil
	file_healthcheck_proto_depIdxs = nil
}
