// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: t1-orch.proto

package lbos_t1_orch

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DummyRuntimeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services map[string]int32 `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Id       string           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DummyRuntimeData) Reset() {
	*x = DummyRuntimeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_t1_orch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DummyRuntimeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DummyRuntimeData) ProtoMessage() {}

func (x *DummyRuntimeData) ProtoReflect() protoreflect.Message {
	mi := &file_t1_orch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DummyRuntimeData.ProtoReflect.Descriptor instead.
func (*DummyRuntimeData) Descriptor() ([]byte, []int) {
	return file_t1_orch_proto_rawDescGZIP(), []int{0}
}

func (x *DummyRuntimeData) GetServices() map[string]int32 {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *DummyRuntimeData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EmptyDummyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EmptyDummyData) Reset() {
	*x = EmptyDummyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_t1_orch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyDummyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyDummyData) ProtoMessage() {}

func (x *EmptyDummyData) ProtoReflect() protoreflect.Message {
	mi := &file_t1_orch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyDummyData.ProtoReflect.Descriptor instead.
func (*EmptyDummyData) Descriptor() ([]byte, []int) {
	return file_t1_orch_proto_rawDescGZIP(), []int{1}
}

func (x *EmptyDummyData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PbIPVSRawServicesData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawServicesData map[string]*PbSendRawIPVSServiceData `protobuf:"bytes,1,rep,name=rawServicesData,proto3" json:"rawServicesData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Id              string                               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PbIPVSRawServicesData) Reset() {
	*x = PbIPVSRawServicesData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_t1_orch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbIPVSRawServicesData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbIPVSRawServicesData) ProtoMessage() {}

func (x *PbIPVSRawServicesData) ProtoReflect() protoreflect.Message {
	mi := &file_t1_orch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbIPVSRawServicesData.ProtoReflect.Descriptor instead.
func (*PbIPVSRawServicesData) Descriptor() ([]byte, []int) {
	return file_t1_orch_proto_rawDescGZIP(), []int{2}
}

func (x *PbIPVSRawServicesData) GetRawServicesData() map[string]*PbSendRawIPVSServiceData {
	if x != nil {
		return x.RawServicesData
	}
	return nil
}

func (x *PbIPVSRawServicesData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type PbSendRawIPVSServiceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawServiceData map[string]uint32 `protobuf:"bytes,1,rep,name=rawServiceData,proto3" json:"rawServiceData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Id             string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PbSendRawIPVSServiceData) Reset() {
	*x = PbSendRawIPVSServiceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_t1_orch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PbSendRawIPVSServiceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PbSendRawIPVSServiceData) ProtoMessage() {}

func (x *PbSendRawIPVSServiceData) ProtoReflect() protoreflect.Message {
	mi := &file_t1_orch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PbSendRawIPVSServiceData.ProtoReflect.Descriptor instead.
func (*PbSendRawIPVSServiceData) Descriptor() ([]byte, []int) {
	return file_t1_orch_proto_rawDescGZIP(), []int{3}
}

func (x *PbSendRawIPVSServiceData) GetRawServiceData() map[string]uint32 {
	if x != nil {
		return x.RawServiceData
	}
	return nil
}

func (x *PbSendRawIPVSServiceData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EmptyIPVSData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EmptyIPVSData) Reset() {
	*x = EmptyIPVSData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_t1_orch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyIPVSData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyIPVSData) ProtoMessage() {}

func (x *EmptyIPVSData) ProtoReflect() protoreflect.Message {
	mi := &file_t1_orch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyIPVSData.ProtoReflect.Descriptor instead.
func (*EmptyIPVSData) Descriptor() ([]byte, []int) {
	return file_t1_orch_proto_rawDescGZIP(), []int{4}
}

func (x *EmptyIPVSData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SendIpRuleRuntimeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fwmarks map[int64]*EmptySendIpRuleData `protobuf:"bytes,1,rep,name=fwmarks,proto3" json:"fwmarks,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Id      string                         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SendIpRuleRuntimeData) Reset() {
	*x = SendIpRuleRuntimeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_t1_orch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendIpRuleRuntimeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendIpRuleRuntimeData) ProtoMessage() {}

func (x *SendIpRuleRuntimeData) ProtoReflect() protoreflect.Message {
	mi := &file_t1_orch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendIpRuleRuntimeData.ProtoReflect.Descriptor instead.
func (*SendIpRuleRuntimeData) Descriptor() ([]byte, []int) {
	return file_t1_orch_proto_rawDescGZIP(), []int{5}
}

func (x *SendIpRuleRuntimeData) GetFwmarks() map[int64]*EmptySendIpRuleData {
	if x != nil {
		return x.Fwmarks
	}
	return nil
}

func (x *SendIpRuleRuntimeData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EmptySendIpRuleData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EmptySendIpRuleData) Reset() {
	*x = EmptySendIpRuleData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_t1_orch_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptySendIpRuleData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptySendIpRuleData) ProtoMessage() {}

func (x *EmptySendIpRuleData) ProtoReflect() protoreflect.Message {
	mi := &file_t1_orch_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptySendIpRuleData.ProtoReflect.Descriptor instead.
func (*EmptySendIpRuleData) Descriptor() ([]byte, []int) {
	return file_t1_orch_proto_rawDescGZIP(), []int{6}
}

func (x *EmptySendIpRuleData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SendTunnelRuntimeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tunnels map[string]int32 `protobuf:"bytes,1,rep,name=tunnels,proto3" json:"tunnels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // TODO: need example
	Id      string           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SendTunnelRuntimeData) Reset() {
	*x = SendTunnelRuntimeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_t1_orch_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendTunnelRuntimeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendTunnelRuntimeData) ProtoMessage() {}

func (x *SendTunnelRuntimeData) ProtoReflect() protoreflect.Message {
	mi := &file_t1_orch_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendTunnelRuntimeData.ProtoReflect.Descriptor instead.
func (*SendTunnelRuntimeData) Descriptor() ([]byte, []int) {
	return file_t1_orch_proto_rawDescGZIP(), []int{7}
}

func (x *SendTunnelRuntimeData) GetTunnels() map[string]int32 {
	if x != nil {
		return x.Tunnels
	}
	return nil
}

func (x *SendTunnelRuntimeData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EmptySendTunnelData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EmptySendTunnelData) Reset() {
	*x = EmptySendTunnelData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_t1_orch_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptySendTunnelData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptySendTunnelData) ProtoMessage() {}

func (x *EmptySendTunnelData) ProtoReflect() protoreflect.Message {
	mi := &file_t1_orch_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptySendTunnelData.ProtoReflect.Descriptor instead.
func (*EmptySendTunnelData) Descriptor() ([]byte, []int) {
	return file_t1_orch_proto_rawDescGZIP(), []int{8}
}

func (x *EmptySendTunnelData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SendRouteRuntimeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RouteData []string `protobuf:"bytes,1,rep,name=routeData,proto3" json:"routeData,omitempty"` // TODO: need example
	Id        string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SendRouteRuntimeData) Reset() {
	*x = SendRouteRuntimeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_t1_orch_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendRouteRuntimeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendRouteRuntimeData) ProtoMessage() {}

func (x *SendRouteRuntimeData) ProtoReflect() protoreflect.Message {
	mi := &file_t1_orch_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendRouteRuntimeData.ProtoReflect.Descriptor instead.
func (*SendRouteRuntimeData) Descriptor() ([]byte, []int) {
	return file_t1_orch_proto_rawDescGZIP(), []int{9}
}

func (x *SendRouteRuntimeData) GetRouteData() []string {
	if x != nil {
		return x.RouteData
	}
	return nil
}

func (x *SendRouteRuntimeData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EmptySendRouteData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *EmptySendRouteData) Reset() {
	*x = EmptySendRouteData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_t1_orch_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptySendRouteData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptySendRouteData) ProtoMessage() {}

func (x *EmptySendRouteData) ProtoReflect() protoreflect.Message {
	mi := &file_t1_orch_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptySendRouteData.ProtoReflect.Descriptor instead.
func (*EmptySendRouteData) Descriptor() ([]byte, []int) {
	return file_t1_orch_proto_rawDescGZIP(), []int{10}
}

func (x *EmptySendRouteData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_t1_orch_proto protoreflect.FileDescriptor

var file_t1_orch_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x74, 0x31, 0x2d, 0x6f, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x22, 0xa9, 0x01,
	0x0a, 0x10, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x48, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e, 0x6f,
	0x72, 0x63, 0x68, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x3b, 0x0a, 0x0d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x20, 0x0a, 0x0e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf7, 0x01, 0x0a, 0x15,
	0x50, 0x62, 0x49, 0x50, 0x56, 0x53, 0x52, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x0f, 0x72, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x2e, 0x50, 0x62,
	0x49, 0x50, 0x56, 0x53, 0x52, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x52, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x72, 0x61, 0x77, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x6a, 0x0a, 0x14, 0x52, 0x61, 0x77,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e, 0x6f, 0x72, 0x63,
	0x68, 0x2e, 0x50, 0x62, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x77, 0x49, 0x50, 0x56, 0x53, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd1, 0x01, 0x0a, 0x18, 0x50, 0x62, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x61, 0x77, 0x49, 0x50, 0x56, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x62, 0x0a, 0x0e, 0x72, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6c, 0x62, 0x6f,
	0x73, 0x2e, 0x74, 0x31, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x2e, 0x50, 0x62, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x61, 0x77, 0x49, 0x50, 0x56, 0x53, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x61, 0x77, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1f, 0x0a, 0x0d, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x49, 0x50, 0x56, 0x53, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x15, 0x53,
	0x65, 0x6e, 0x64, 0x49, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x07, 0x66, 0x77, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e,
	0x6f, 0x72, 0x63, 0x68, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x77, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x77, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x1a, 0x5d, 0x0a, 0x0c, 0x46, 0x77, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e, 0x6f, 0x72, 0x63, 0x68,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x70, 0x52, 0x75, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x25, 0x0a, 0x13, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x70, 0x52, 0x75,
	0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x4a, 0x0a, 0x07, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e, 0x6f, 0x72, 0x63, 0x68,
	0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x3a, 0x0a, 0x0c,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x25, 0x0a, 0x13, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x44, 0x0a, 0x14, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x12, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x32, 0xca, 0x03, 0x0a, 0x0b,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x44,
	0x75, 0x6d, 0x6d, 0x79, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x6c, 0x62,
	0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x1c, 0x2e, 0x6c, 0x62,
	0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x44, 0x75, 0x6d, 0x6d, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0b, 0x49,
	0x50, 0x56, 0x53, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x2e, 0x6c, 0x62, 0x6f,
	0x73, 0x2e, 0x74, 0x31, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x2e, 0x50, 0x62, 0x49, 0x50, 0x56, 0x53,
	0x52, 0x61, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x1b, 0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x49, 0x50, 0x56, 0x53, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x23, 0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e, 0x6f, 0x72,
	0x63, 0x68, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x21, 0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e,
	0x74, 0x31, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x65, 0x6e,
	0x64, 0x49, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5d, 0x0a,
	0x11, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x23, 0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e, 0x6f, 0x72, 0x63,
	0x68, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x21, 0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74,
	0x31, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x64,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x10,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e, 0x6f, 0x72, 0x63, 0x68, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x20, 0x2e, 0x6c, 0x62, 0x6f, 0x73, 0x2e, 0x74, 0x31, 0x2e, 0x6f,
	0x72, 0x63, 0x68, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_t1_orch_proto_rawDescOnce sync.Once
	file_t1_orch_proto_rawDescData = file_t1_orch_proto_rawDesc
)

func file_t1_orch_proto_rawDescGZIP() []byte {
	file_t1_orch_proto_rawDescOnce.Do(func() {
		file_t1_orch_proto_rawDescData = protoimpl.X.CompressGZIP(file_t1_orch_proto_rawDescData)
	})
	return file_t1_orch_proto_rawDescData
}

var file_t1_orch_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_t1_orch_proto_goTypes = []interface{}{
	(*DummyRuntimeData)(nil),         // 0: lbos.t1.orch.DummyRuntimeData
	(*EmptyDummyData)(nil),           // 1: lbos.t1.orch.EmptyDummyData
	(*PbIPVSRawServicesData)(nil),    // 2: lbos.t1.orch.PbIPVSRawServicesData
	(*PbSendRawIPVSServiceData)(nil), // 3: lbos.t1.orch.PbSendRawIPVSServiceData
	(*EmptyIPVSData)(nil),            // 4: lbos.t1.orch.EmptyIPVSData
	(*SendIpRuleRuntimeData)(nil),    // 5: lbos.t1.orch.SendIpRuleRuntimeData
	(*EmptySendIpRuleData)(nil),      // 6: lbos.t1.orch.EmptySendIpRuleData
	(*SendTunnelRuntimeData)(nil),    // 7: lbos.t1.orch.SendTunnelRuntimeData
	(*EmptySendTunnelData)(nil),      // 8: lbos.t1.orch.EmptySendTunnelData
	(*SendRouteRuntimeData)(nil),     // 9: lbos.t1.orch.SendRouteRuntimeData
	(*EmptySendRouteData)(nil),       // 10: lbos.t1.orch.EmptySendRouteData
	nil,                              // 11: lbos.t1.orch.DummyRuntimeData.ServicesEntry
	nil,                              // 12: lbos.t1.orch.PbIPVSRawServicesData.RawServicesDataEntry
	nil,                              // 13: lbos.t1.orch.PbSendRawIPVSServiceData.RawServiceDataEntry
	nil,                              // 14: lbos.t1.orch.SendIpRuleRuntimeData.FwmarksEntry
	nil,                              // 15: lbos.t1.orch.SendTunnelRuntimeData.TunnelsEntry
}
var file_t1_orch_proto_depIdxs = []int32{
	11, // 0: lbos.t1.orch.DummyRuntimeData.services:type_name -> lbos.t1.orch.DummyRuntimeData.ServicesEntry
	12, // 1: lbos.t1.orch.PbIPVSRawServicesData.rawServicesData:type_name -> lbos.t1.orch.PbIPVSRawServicesData.RawServicesDataEntry
	13, // 2: lbos.t1.orch.PbSendRawIPVSServiceData.rawServiceData:type_name -> lbos.t1.orch.PbSendRawIPVSServiceData.RawServiceDataEntry
	14, // 3: lbos.t1.orch.SendIpRuleRuntimeData.fwmarks:type_name -> lbos.t1.orch.SendIpRuleRuntimeData.FwmarksEntry
	15, // 4: lbos.t1.orch.SendTunnelRuntimeData.tunnels:type_name -> lbos.t1.orch.SendTunnelRuntimeData.TunnelsEntry
	3,  // 5: lbos.t1.orch.PbIPVSRawServicesData.RawServicesDataEntry.value:type_name -> lbos.t1.orch.PbSendRawIPVSServiceData
	6,  // 6: lbos.t1.orch.SendIpRuleRuntimeData.FwmarksEntry.value:type_name -> lbos.t1.orch.EmptySendIpRuleData
	0,  // 7: lbos.t1.orch.SendRuntime.DummyRuntime:input_type -> lbos.t1.orch.DummyRuntimeData
	2,  // 8: lbos.t1.orch.SendRuntime.IPVSRuntime:input_type -> lbos.t1.orch.PbIPVSRawServicesData
	5,  // 9: lbos.t1.orch.SendRuntime.SendIpRuleRuntime:input_type -> lbos.t1.orch.SendIpRuleRuntimeData
	7,  // 10: lbos.t1.orch.SendRuntime.SendTunnelRuntime:input_type -> lbos.t1.orch.SendTunnelRuntimeData
	9,  // 11: lbos.t1.orch.SendRuntime.SendRouteRuntime:input_type -> lbos.t1.orch.SendRouteRuntimeData
	1,  // 12: lbos.t1.orch.SendRuntime.DummyRuntime:output_type -> lbos.t1.orch.EmptyDummyData
	4,  // 13: lbos.t1.orch.SendRuntime.IPVSRuntime:output_type -> lbos.t1.orch.EmptyIPVSData
	6,  // 14: lbos.t1.orch.SendRuntime.SendIpRuleRuntime:output_type -> lbos.t1.orch.EmptySendIpRuleData
	8,  // 15: lbos.t1.orch.SendRuntime.SendTunnelRuntime:output_type -> lbos.t1.orch.EmptySendTunnelData
	10, // 16: lbos.t1.orch.SendRuntime.SendRouteRuntime:output_type -> lbos.t1.orch.EmptySendRouteData
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_t1_orch_proto_init() }
func file_t1_orch_proto_init() {
	if File_t1_orch_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_t1_orch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DummyRuntimeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_t1_orch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyDummyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_t1_orch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbIPVSRawServicesData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_t1_orch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PbSendRawIPVSServiceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_t1_orch_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyIPVSData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_t1_orch_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendIpRuleRuntimeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_t1_orch_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptySendIpRuleData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_t1_orch_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendTunnelRuntimeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_t1_orch_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptySendTunnelData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_t1_orch_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendRouteRuntimeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_t1_orch_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptySendRouteData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_t1_orch_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_t1_orch_proto_goTypes,
		DependencyIndexes: file_t1_orch_proto_depIdxs,
		MessageInfos:      file_t1_orch_proto_msgTypes,
	}.Build()
	File_t1_orch_proto = out.File
	file_t1_orch_proto_rawDesc = nil
	file_t1_orch_proto_goTypes = nil
	file_t1_orch_proto_depIdxs = nil
}
