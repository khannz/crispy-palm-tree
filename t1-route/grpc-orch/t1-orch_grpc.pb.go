// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lbos_t1_orch

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SendRuntimeClient is the client API for SendRuntime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendRuntimeClient interface {
	SendDummyRuntime(ctx context.Context, in *SendDummyRuntimeData, opts ...grpc.CallOption) (*EmptySendDummyData, error)
	SendRouteRuntime(ctx context.Context, in *SendAllRoutesRuntimeData, opts ...grpc.CallOption) (*EmptySendRouteData, error)
}

type sendRuntimeClient struct {
	cc grpc.ClientConnInterface
}

func NewSendRuntimeClient(cc grpc.ClientConnInterface) SendRuntimeClient {
	return &sendRuntimeClient{cc}
}

func (c *sendRuntimeClient) SendDummyRuntime(ctx context.Context, in *SendDummyRuntimeData, opts ...grpc.CallOption) (*EmptySendDummyData, error) {
	out := new(EmptySendDummyData)
	err := c.cc.Invoke(ctx, "/lbos.t1.orch.SendRuntime/SendDummyRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendRuntimeClient) SendRouteRuntime(ctx context.Context, in *SendAllRoutesRuntimeData, opts ...grpc.CallOption) (*EmptySendRouteData, error) {
	out := new(EmptySendRouteData)
	err := c.cc.Invoke(ctx, "/lbos.t1.orch.SendRuntime/SendRouteRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendRuntimeServer is the server API for SendRuntime service.
// All implementations must embed UnimplementedSendRuntimeServer
// for forward compatibility
type SendRuntimeServer interface {
	SendDummyRuntime(context.Context, *SendDummyRuntimeData) (*EmptySendDummyData, error)
	SendRouteRuntime(context.Context, *SendAllRoutesRuntimeData) (*EmptySendRouteData, error)
	mustEmbedUnimplementedSendRuntimeServer()
}

// UnimplementedSendRuntimeServer must be embedded to have forward compatible implementations.
type UnimplementedSendRuntimeServer struct {
}

func (UnimplementedSendRuntimeServer) SendDummyRuntime(context.Context, *SendDummyRuntimeData) (*EmptySendDummyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDummyRuntime not implemented")
}
func (UnimplementedSendRuntimeServer) SendRouteRuntime(context.Context, *SendAllRoutesRuntimeData) (*EmptySendRouteData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRouteRuntime not implemented")
}
func (UnimplementedSendRuntimeServer) mustEmbedUnimplementedSendRuntimeServer() {}

// UnsafeSendRuntimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendRuntimeServer will
// result in compilation errors.
type UnsafeSendRuntimeServer interface {
	mustEmbedUnimplementedSendRuntimeServer()
}

func RegisterSendRuntimeServer(s *grpc.Server, srv SendRuntimeServer) {
	s.RegisterService(&_SendRuntime_serviceDesc, srv)
}

func _SendRuntime_SendDummyRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDummyRuntimeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendRuntimeServer).SendDummyRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbos.t1.orch.SendRuntime/SendDummyRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendRuntimeServer).SendDummyRuntime(ctx, req.(*SendDummyRuntimeData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendRuntime_SendRouteRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAllRoutesRuntimeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendRuntimeServer).SendRouteRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbos.t1.orch.SendRuntime/SendRouteRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendRuntimeServer).SendRouteRuntime(ctx, req.(*SendAllRoutesRuntimeData))
	}
	return interceptor(ctx, in, info, handler)
}

var _SendRuntime_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lbos.t1.orch.SendRuntime",
	HandlerType: (*SendRuntimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendDummyRuntime",
			Handler:    _SendRuntime_SendDummyRuntime_Handler,
		},
		{
			MethodName: "SendRouteRuntime",
			Handler:    _SendRuntime_SendRouteRuntime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "t1-orch.proto",
}
