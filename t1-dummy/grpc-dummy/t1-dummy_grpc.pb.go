// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lbos_t1_dummy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DummyWorkerClient is the client API for DummyWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DummyWorkerClient interface {
	AddToDummy(ctx context.Context, in *IpData, opts ...grpc.CallOption) (*EmptyDummyData, error)
	RemoveFromDummy(ctx context.Context, in *IpData, opts ...grpc.CallOption) (*EmptyDummyData, error)
	GetDummyRuntime(ctx context.Context, in *EmptyDummyData, opts ...grpc.CallOption) (*GetDummyRuntimeData, error)
}

type dummyWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewDummyWorkerClient(cc grpc.ClientConnInterface) DummyWorkerClient {
	return &dummyWorkerClient{cc}
}

func (c *dummyWorkerClient) AddToDummy(ctx context.Context, in *IpData, opts ...grpc.CallOption) (*EmptyDummyData, error) {
	out := new(EmptyDummyData)
	err := c.cc.Invoke(ctx, "/lbos.t1.dummy.DummyWorker/AddToDummy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummyWorkerClient) RemoveFromDummy(ctx context.Context, in *IpData, opts ...grpc.CallOption) (*EmptyDummyData, error) {
	out := new(EmptyDummyData)
	err := c.cc.Invoke(ctx, "/lbos.t1.dummy.DummyWorker/RemoveFromDummy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummyWorkerClient) GetDummyRuntime(ctx context.Context, in *EmptyDummyData, opts ...grpc.CallOption) (*GetDummyRuntimeData, error) {
	out := new(GetDummyRuntimeData)
	err := c.cc.Invoke(ctx, "/lbos.t1.dummy.DummyWorker/GetDummyRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DummyWorkerServer is the server API for DummyWorker service.
// All implementations must embed UnimplementedDummyWorkerServer
// for forward compatibility
type DummyWorkerServer interface {
	AddToDummy(context.Context, *IpData) (*EmptyDummyData, error)
	RemoveFromDummy(context.Context, *IpData) (*EmptyDummyData, error)
	GetDummyRuntime(context.Context, *EmptyDummyData) (*GetDummyRuntimeData, error)
	mustEmbedUnimplementedDummyWorkerServer()
}

// UnimplementedDummyWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedDummyWorkerServer struct {
}

func (UnimplementedDummyWorkerServer) AddToDummy(context.Context, *IpData) (*EmptyDummyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToDummy not implemented")
}
func (UnimplementedDummyWorkerServer) RemoveFromDummy(context.Context, *IpData) (*EmptyDummyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromDummy not implemented")
}
func (UnimplementedDummyWorkerServer) GetDummyRuntime(context.Context, *EmptyDummyData) (*GetDummyRuntimeData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDummyRuntime not implemented")
}
func (UnimplementedDummyWorkerServer) mustEmbedUnimplementedDummyWorkerServer() {}

// UnsafeDummyWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DummyWorkerServer will
// result in compilation errors.
type UnsafeDummyWorkerServer interface {
	mustEmbedUnimplementedDummyWorkerServer()
}

func RegisterDummyWorkerServer(s grpc.ServiceRegistrar, srv DummyWorkerServer) {
	s.RegisterService(&DummyWorker_ServiceDesc, srv)
}

func _DummyWorker_AddToDummy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummyWorkerServer).AddToDummy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbos.t1.dummy.DummyWorker/AddToDummy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummyWorkerServer).AddToDummy(ctx, req.(*IpData))
	}
	return interceptor(ctx, in, info, handler)
}

func _DummyWorker_RemoveFromDummy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummyWorkerServer).RemoveFromDummy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbos.t1.dummy.DummyWorker/RemoveFromDummy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummyWorkerServer).RemoveFromDummy(ctx, req.(*IpData))
	}
	return interceptor(ctx, in, info, handler)
}

func _DummyWorker_GetDummyRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyDummyData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummyWorkerServer).GetDummyRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lbos.t1.dummy.DummyWorker/GetDummyRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummyWorkerServer).GetDummyRuntime(ctx, req.(*EmptyDummyData))
	}
	return interceptor(ctx, in, info, handler)
}

// DummyWorker_ServiceDesc is the grpc.ServiceDesc for DummyWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DummyWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lbos.t1.dummy.DummyWorker",
	HandlerType: (*DummyWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToDummy",
			Handler:    _DummyWorker_AddToDummy_Handler,
		},
		{
			MethodName: "RemoveFromDummy",
			Handler:    _DummyWorker_RemoveFromDummy_Handler,
		},
		{
			MethodName: "GetDummyRuntime",
			Handler:    _DummyWorker_GetDummyRuntime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "t1-dummy.proto",
}
