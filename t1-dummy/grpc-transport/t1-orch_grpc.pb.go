// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SendDummyRuntimeClient is the client API for SendDummyRuntime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendDummyRuntimeClient interface {
	SendDummyRuntime(ctx context.Context, in *SendDummyRuntimeData, opts ...grpc.CallOption) (*EmptySendDummyData, error)
}

type sendDummyRuntimeClient struct {
	cc grpc.ClientConnInterface
}

func NewSendDummyRuntimeClient(cc grpc.ClientConnInterface) SendDummyRuntimeClient {
	return &sendDummyRuntimeClient{cc}
}

func (c *sendDummyRuntimeClient) SendDummyRuntime(ctx context.Context, in *SendDummyRuntimeData, opts ...grpc.CallOption) (*EmptySendDummyData, error) {
	out := new(EmptySendDummyData)
	err := c.cc.Invoke(ctx, "/transport.SendDummyRuntime/SendDummyRuntime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendDummyRuntimeServer is the server API for SendDummyRuntime service.
// All implementations must embed UnimplementedSendDummyRuntimeServer
// for forward compatibility
type SendDummyRuntimeServer interface {
	SendDummyRuntime(context.Context, *SendDummyRuntimeData) (*EmptySendDummyData, error)
	mustEmbedUnimplementedSendDummyRuntimeServer()
}

// UnimplementedSendDummyRuntimeServer must be embedded to have forward compatible implementations.
type UnimplementedSendDummyRuntimeServer struct {
}

func (UnimplementedSendDummyRuntimeServer) SendDummyRuntime(context.Context, *SendDummyRuntimeData) (*EmptySendDummyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDummyRuntime not implemented")
}
func (UnimplementedSendDummyRuntimeServer) mustEmbedUnimplementedSendDummyRuntimeServer() {}

// UnsafeSendDummyRuntimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendDummyRuntimeServer will
// result in compilation errors.
type UnsafeSendDummyRuntimeServer interface {
	mustEmbedUnimplementedSendDummyRuntimeServer()
}

func RegisterSendDummyRuntimeServer(s *grpc.Server, srv SendDummyRuntimeServer) {
	s.RegisterService(&_SendDummyRuntime_serviceDesc, srv)
}

func _SendDummyRuntime_SendDummyRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDummyRuntimeData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendDummyRuntimeServer).SendDummyRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transport.SendDummyRuntime/SendDummyRuntime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendDummyRuntimeServer).SendDummyRuntime(ctx, req.(*SendDummyRuntimeData))
	}
	return interceptor(ctx, in, info, handler)
}

var _SendDummyRuntime_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transport.SendDummyRuntime",
	HandlerType: (*SendDummyRuntimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendDummyRuntime",
			Handler:    _SendDummyRuntime_SendDummyRuntime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "t1-orch.proto",
}
